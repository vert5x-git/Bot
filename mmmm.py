import telebot
from telebot import types
import random
import time
import requests
import string # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ---
BOT_TOKEN = "YOUR_BOT_TOKEN"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù –ë–û–¢–ê
CRYPTO_PAY_API_TOKEN = "YOUR_CRYPTO_PAY_API_TOKEN"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù CRYPTO PAY API
CRYPTO_PAY_API_URL = "https://pay.crypt.bot/api/" # –ë–∞–∑–æ–≤—ã–π URL Crypto Pay API

# --- ID –û—Å–Ω–æ–≤–Ω—ã—Ö –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ---
# –í–ê–ñ–ù–û: –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π Telegram ID, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è–º.
# –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID –º–æ–∂–Ω–æ —É @userinfobot –≤ Telegram.
# –≠—Ç–∏ ID –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏ –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å/–æ—Ç–∑—ã–≤–∞—Ç—å –∞–¥–º–∏–Ω–∫–∏ –¥—Ä—É–≥–∏–º.
SUPER_ADMIN_IDS = [123456789] # –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò ID –ù–ê –†–ï–ê–õ–¨–ù–´–ï ID –ì–õ–ê–í–ù–´–• –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í

bot = telebot.TeleBot(BOT_TOKEN)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö (–í–ù–ò–ú–ê–ù–ò–ï: –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ä—è—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ!) ---
# –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω—É–∂–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö!
user_balances = {} # {chat_id: {"balance": 0, "ton_balance": 0, "has_premium": False, "donations_count": 0, "is_admin": False}}
promocodes = {}    # {code: {"type": "currency/ton", "amount": 0, "uses_left": 0}}
chat_treasury = {"balance": 0}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥)
user_states = {} # {chat_id: {"state": "waiting_for_promo_code", "data": {}}}

# --- –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π ---
EMOJI_MINES_START = "üí£"
EMOJI_MINES_WIN = "üéâ"
EMOJI_MINES_LOSE = "üí•"
EMOJI_CUBE_START = "üé≤"
EMOJI_CUBE_WIN = "‚ú®"
EMOJI_CUBE_LOSE = "üò¢"
EMOJI_COIN_FLIP = "ü™ô"
EMOJI_HIGHER_LOWER = "üî¢"
EMOJI_SLOT_MACHINE = "üé∞"
EMOJI_PREMIUM_GRANTED = "üåü"
EMOJI_PREMIUM_FEATURE = "üëë"
EMOJI_ADMIN_PANEL = "‚öôÔ∏è"
EMOJI_SUCCESS = "‚úÖ"
EMOJI_ERROR = "‚ùå"
EMOJI_BALANCE = "üí∞"
EMOJI_TON = "üíé"
EMOJI_TOP = "üèÜ"
EMOJI_TREASURY = "üè¶"
EMOJI_PROMOCODE = "üéÅ"
EMOJI_BROADCAST = "üì¢"

# --- –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_user_data(chat_id):
    if chat_id not in user_balances:
        user_balances[chat_id] = {
            "balance": 1000, # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            "ton_balance": 0,
            "has_premium": False,
            "donations_count": 0,
            "is_admin": chat_id in SUPER_ADMIN_IDS # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –≤—Å–µ–≥–¥–∞ –∞–¥–º–∏–Ω—ã
        }
    return user_balances[chat_id]

def update_balance(chat_id, amount):
    user_data = get_user_data(chat_id)
    user_data["balance"] += amount

def update_ton_balance(chat_id, amount):
    user_data = get_user_data(chat_id)
    user_data["ton_balance"] += amount

def has_premium(chat_id):
    return get_user_data(chat_id).get("has_premium", False)

def is_admin(chat_id):
    return get_user_data(chat_id).get("is_admin", False)

def is_super_admin(chat_id):
    return chat_id in SUPER_ADMIN_IDS

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞–≤–æ–∫ —Å –∞–ª–∏–∞—Å–∞–º–∏ ---
def parse_bet_amount(message_text, chat_id):
    text = message_text.lower().strip()
    user_data = get_user_data(chat_id)
    
    if text == '–≤—Å–µ':
        return user_data["balance"]
    elif text.endswith('–∫'):
        try:
            amount_k = float(text[:-1])
            return int(amount_k * 1000)
        except ValueError:
            return None
    else:
        try:
            return int(text)
        except ValueError:
            return None

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@bot.message_handler(commands=['start', 'menu'])
def send_welcome(message):
    chat_id = message.chat.id
    get_user_data(chat_id) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_data(chat_id)

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–°–∞–ø–µ—Ä üí£'),
        types.KeyboardButton('–ö—É–±–∏–∫–∏ üé≤'),
        types.KeyboardButton('–ú–æ–Ω–µ—Ç–∫–∞ ü™ô'),
        types.KeyboardButton('–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ üî¢'),
        types.KeyboardButton('–°–ª–æ—Ç—ã üé∞'),
        types.KeyboardButton('–î–æ–Ω–∞—Ç/–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ ‚ú®')
    )
    markup.add(
        types.KeyboardButton('–ë–∞–ª–∞–Ω—Å üí∞'), # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        types.KeyboardButton('–ú–æ–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ üëë'), # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        types.KeyboardButton('–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ üèÜ') # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    )
    markup.add(types.KeyboardButton('–ü—Ä–æ–º–æ–∫–æ–¥ üéÅ')) # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    if is_admin(chat_id):
        markup.add(types.KeyboardButton('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚öôÔ∏è'))

    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏–ª–∏ –æ–ø—Ü–∏—é:", reply_markup=markup)

# --- –ë–∞–ª–∞–Ω—Å ---
@bot.message_handler(regexp='^–ë–∞–ª–∞–Ω—Å üí∞$|^–±$|^–±–∞–ª–∞–Ω—Å$')
def show_balance(message):
    chat_id = message.chat.id
    user_data = get_user_data(chat_id)
    bot.send_message(chat_id,
                     f"{EMOJI_BALANCE} –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{user_data['balance']:.2f} –º–æ–Ω–µ—Ç**\n"
                     f"{EMOJI_TON} –í–∞—à TON-–±–∞–ª–∞–Ω—Å: **{user_data['ton_balance']:.2f} TON**",
                     parse_mode='Markdown')

# --- –ú–æ–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ (–±—ã–≤—à–∞—è "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è") ---
@bot.message_handler(regexp='–ú–æ–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ üëë')
def show_my_privileges(message):
    chat_id = message.chat.id
    user_data = get_user_data(chat_id)
    
    premium_status = "–ê–∫—Ç–∏–≤–Ω–∞ üåü" if user_data["has_premium"] else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå"
    admin_status = "–î–∞ ‚úÖ" if user_data["is_admin"] else "–ù–µ—Ç ‚õî"
    
    bot.send_message(chat_id,
                     f"{EMOJI_PREMIUM_FEATURE} **–í–∞—à–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:**\n"
                     f"  –ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å: **{premium_status}**\n"
                     f"  –°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: **{admin_status}**\n"
                     f"  –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ç–æ–≤: **{user_data['donations_count']}**\n\n"
                     f"**–ü—Ä–µ–º–∏—É–º-–±–æ–Ω—É—Å—ã:**\n"
                     f"  - –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ –∏–≥—Ä–∞—Ö (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)\n"
                     f"  - –°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–Ω—è: '{random.choice(['–£–¥–∞—á–∞ —É–ª—ã–±–∞–µ—Ç—Å—è —Å–º–µ–ª—ã–º!', '–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å!', '–í–µ—Ä—å –≤ —Å–≤–æ–∏ —Å–∏–ª—ã!'])}'",
                     parse_mode='Markdown')

# --- –ü—Ä–æ–º–æ–∫–æ–¥—ã ---
@bot.message_handler(regexp='–ü—Ä–æ–º–æ–∫–æ–¥ üéÅ')
def promo_code_entry(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, f"{EMOJI_PROMOCODE} –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    user_states[chat_id] = {"state": "waiting_for_promo_code"} # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    bot.register_next_step_handler(message, process_promo_code)

def process_promo_code(message):
    chat_id = message.chat.id
    if user_states.get(chat_id, {}).get("state") != "waiting_for_promo_code":
        return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Ç–æ

    entered_code = message.text.strip().upper()
    user_data = get_user_data(chat_id)

    if entered_code in promocodes:
        promo_info = promocodes[entered_code]
        if promo_info["uses_left"] > 0:
            if promo_info["type"] == "currency":
                update_balance(chat_id, promo_info["amount"])
                bot.send_message(chat_id, f"{EMOJI_SUCCESS} –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ **{promo_info['amount']} –º–æ–Ω–µ—Ç**.")
            elif promo_info["type"] == "ton":
                update_ton_balance(chat_id, promo_info["amount"])
                bot.send_message(chat_id, f"{EMOJI_SUCCESS} –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ **{promo_info['amount']} TON**.")
            
            promo_info["uses_left"] -= 1
            if promo_info["uses_left"] == 0:
                del promocodes[entered_code] # –£–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            bot.send_message(chat_id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç, {user_data['ton_balance']} TON.", parse_mode='Markdown')
        else:
            bot.send_message(chat_id, f"{EMOJI_ERROR} –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –µ–≥–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫.")
    else:
        bot.send_message(chat_id, f"{EMOJI_ERROR} –ü—Ä–æ–º–æ–∫–æ–¥ **{entered_code}** –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.", parse_mode='Markdown')
    
    del user_states[chat_id] # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    send_welcome(message) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

# --- –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ ---
@bot.message_handler(regexp='–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ üèÜ')
def show_top_players(message):
    chat_id = message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å
    sorted_users = sorted([
        (uid, data["balance"]) for uid, data in user_balances.items()
    ], key=lambda x: x[1], reverse=True) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–∞–Ω—Å—É –ø–æ —É–±—ã–≤–∞–Ω–∏—é

    top_text = f"{EMOJI_TOP} **–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:**\n\n"
    for i, (user_id, balance) in enumerate(sorted_users[:10]):
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ, –∏–º—è —Ö—Ä–∞–Ω–∏–ª–æ—Å—å –±—ã –≤ –ë–î
        # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±—ã get_chat –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏, –Ω–æ —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        # –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id.
        top_text += f"{i+1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id}`: **{balance:.2f} –º–æ–Ω–µ—Ç**\n"
    
    if not sorted_users:
        top_text += "–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–æ–ø–µ."
        
    bot.send_message(chat_id, top_text, parse_mode='Markdown')

# --- Helper function for setting bets ---
def prompt_for_bet(message, game_type_key, next_step_function):
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –¥–ª—è –∏–≥—Ä—ã {game_type_key} (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100, 5–∫, –∏–ª–∏ –≤—Å–µ):")
    bot.register_next_step_handler(message, next_step_function)

def process_bet(message, game_type, start_game_func):
    chat_id = message.chat.id
    bet = parse_bet_amount(message.text, chat_id)
    user_data = get_user_data(chat_id)

    if bet is None or bet <= 0:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, '1–∫' –∏–ª–∏ '–≤—Å–µ'.")
        # Re-prompt for bet for the specific game
        if game_type == "mines":
            mines_set_bet_prompt(message)
        elif game_type == "dice":
            dice_set_bet_prompt(message)
        elif game_type == "coin_flip":
            coin_flip_set_bet_prompt(message)
        elif game_type == "higher_lower":
            higher_lower_set_bet_prompt(message)
        elif game_type == "slot_machine":
            slot_machine_set_bet_prompt(message)
        return

    if bet > user_data["balance"]:
        bot.send_message(chat_id, f"{EMOJI_ERROR} –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} –º–æ–Ω–µ—Ç.")
        # Re-prompt for bet
        if game_type == "mines":
            mines_set_bet_prompt(message)
        elif game_type == "dice":
            dice_set_bet_prompt(message)
        elif game_type == "coin_flip":
            coin_flip_set_bet_prompt(message)
        elif game_type == "higher_lower":
            higher_lower_set_bet_prompt(message)
        elif game_type == "slot_machine":
            slot_machine_set_bet_prompt(message)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏
    user_data.update({"current_bet": bet, "game_type": game_type})
    bot.send_message(chat_id, f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–ª—è {game_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {bet}.")
    start_game_func(message) # Go back to game menu

# --- Mines Game (unchanged logic, only start menu and bet handling refer to the new structure) ---
@bot.message_handler(regexp='–°–∞–ø–µ—Ä üí£')
def mines_start_menu(message):
    bot.send_message(message.chat.id, f"{EMOJI_MINES_START} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –°–∞–ø–µ—Ä! –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É?")
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–ò–≥—Ä–∞—Ç—å –≤ –°–∞–ø–µ—Ä'),
        types.KeyboardButton('–í–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É (–°–∞–ø–µ—Ä)')
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(regexp='–í–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É (–°–∞–ø–µ—Ä)')
def mines_set_bet_prompt(message):
    prompt_for_bet(message, "–°–∞–ø–µ—Ä", lambda msg: process_bet(msg, "mines", mines_start_menu))

@bot.message_handler(regexp='–ò–≥—Ä–∞—Ç—å –≤ –°–∞–ø–µ—Ä')
def start_mines_game(message):
    chat_id = message.chat.id
    if chat_id not in user_balances or user_balances[chat_id].get("current_bet", 0) <= 0 or user_balances[chat_id].get("game_type") != "mines":
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞–≤–∫—É –¥–ª—è –∏–≥—Ä—ã –°–∞–ø–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É '–í–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É (–°–∞–ø–µ—Ä)'.")
        mines_start_menu(message)
        return

    user_data = get_user_data(chat_id)
    bet = user_data["current_bet"]
    update_balance(chat_id, -bet) # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É

    mines_count = random.randint(3, 8)
    field_size = 5
    total_cells = field_size * field_size
    mine_positions = random.sample(range(total_cells), mines_count)
    mine_field = ['‚¨ú' for _ in range(total_cells)]
    for pos in mine_positions:
        mine_field[pos] = 'üí£'

    user_data.update({
        "game_type": "mines",
        "mines_revealed": [],
        "mines_count": mines_count,
        "mine_field": mine_field,
        "current_win": 0,
        "revealed_safe_cells": 0
    })

    bot.send_message(chat_id, f"–ò–≥—Ä–∞ –°–∞–ø–µ—Ä –Ω–∞—á–∞–ª–∞—Å—å! –ù–∞ –ø–æ–ª–µ {mines_count} –º–∏–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ —è—á–µ–π–∫–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ.")
    send_mines_field(chat_id)

def send_mines_field(chat_id):
    game_data = user_balances[chat_id]
    field = game_data["mine_field"]
    revealed = game_data["mines_revealed"]

    markup = types.InlineKeyboardMarkup()
    buttons = []

    for i in range(len(field)):
        if i % 5 == 0 and i != 0:
            markup.add(*buttons)
            buttons = []

        if i in revealed:
            buttons.append(types.InlineKeyboardButton(field[i], callback_data=f"mines_click_{i}"))
        else:
            buttons.append(types.InlineKeyboardButton('‚ùì', callback_data=f"mines_click_{i}"))
    markup.add(*buttons)

    revealed_safe = game_data["revealed_safe_cells"]
    coefficient = 1.0 + (revealed_safe * 0.25)
    # –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º, —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ—ç—Ñ
    if has_premium(chat_id):
        coefficient += 0.1 # –ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É

    text = f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {game_data['current_bet']}\n"
    text += f"–û—Ç–∫—Ä—ã—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —è—á–µ–µ–∫: {revealed_safe}\n"
    text += f"–¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {coefficient:.2f}\n"
    text += f"–¢–µ–∫—É—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {game_data['current_bet'] * coefficient:.2f} –º–æ–Ω–µ—Ç\n\n"
    text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —è—á–µ–π–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–µ:"

    cash_out_markup = types.InlineKeyboardMarkup()
    cash_out_button = types.InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à üí∞", callback_data="mines_cash_out")
    cash_out_markup.add(cash_out_button)

    bot.send_message(chat_id, text, reply_markup=markup)
    if game_data["revealed_safe_cells"] > 0:
        bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à?", reply_markup=cash_out_markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('mines_click_'))
def mines_callback_query(call):
    chat_id = call.message.chat.id
    if chat_id not in user_balances or user_balances[chat_id].get("game_type") != "mines":
        bot.answer_callback_query(call.id, "–≠—Ç–∞ –∏–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    index = int(call.data.split('_')[2])
    game_data = user_balances[chat_id]
    mine_field = game_data["mine_field"]

    if index in game_data["mines_revealed"]:
        bot.answer_callback_query(call.id, "–≠—Ç–∞ —è—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞.")
        return

    game_data["mines_revealed"].append(index)

    if mine_field[index] == 'üí£':
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=f"{EMOJI_MINES_LOSE} –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n"
                                                                                          f"–í–∞—à –±–∞–ª–∞–Ω—Å: {get_user_data(chat_id)['balance']:.2f} –º–æ–Ω–µ—Ç.")
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        game_data["game_type"] = ""
        send_welcome(call.message)
    else:
        game_data["revealed_safe_cells"] += 1
        total_safe_cells = len(mine_field) - game_data["mines_count"]

        coefficient = 1.0 + (game_data["revealed_safe_cells"] * 0.25)
        if has_premium(chat_id):
            coefficient += 0.1
        game_data["current_win"] = game_data["current_bet"] * coefficient

        if game_data["revealed_safe_cells"] == total_safe_cells:
            final_win = game_data["current_bet"] * coefficient
            update_balance(chat_id, final_win)
            bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                                  text=f"{EMOJI_MINES_WIN} –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏! –í–∞—à –≤—ã–∏–≥—Ä—ã—à: {final_win:.2f} –º–æ–Ω–µ—Ç!\n"
                                       f"–í–∞—à –±–∞–ª–∞–Ω—Å: {get_user_data(chat_id)['balance']:.2f} –º–æ–Ω–µ—Ç.")
            game_data["game_type"] = ""
            send_welcome(call.message)
        else:
            current_bet = game_data["current_bet"]
            current_win = game_data["current_win"]
            
            field_representation = ""
            for i in range(len(mine_field)):
                if i in game_data["mines_revealed"]:
                    field_representation += mine_field[i] + " "
                else:
                    field_representation += "‚ùì "
                if (i + 1) % 5 == 0:
                    field_representation += "\n"
            
            updated_text = (
                f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {current_bet}\n"
                f"–û—Ç–∫—Ä—ã—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —è—á–µ–µ–∫: {game_data['revealed_safe_cells']}\n"
                f"–¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {coefficient:.2f}\n"
                f"–¢–µ–∫—É—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {current_win:.2f} –º–æ–Ω–µ—Ç\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —è—á–µ–π–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–µ:\n{field_representation}"
            )
            
            markup = types.InlineKeyboardMarkup()
            buttons = []
            for i in range(len(mine_field)):
                if i % 5 == 0 and i != 0:
                    markup.add(*buttons)
                    buttons = []
                if i in game_data["mines_revealed"]:
                    buttons.append(types.InlineKeyboardButton(mine_field[i], callback_data=f"mines_click_{i}"))
                else:
                    buttons.append(types.InlineKeyboardButton('‚ùì', callback_data=f"mines_click_{i}"))
            markup.add(*buttons)
            
            cash_out_markup = types.InlineKeyboardMarkup()
            cash_out_button = types.InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à üí∞", callback_data="mines_cash_out")
            cash_out_markup.add(cash_out_button)

            bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                                  text=updated_text, reply_markup=markup)
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–≤–æ–¥–∞
            # –í–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑
            bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à?", reply_markup=cash_out_markup)


            bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'mines_cash_out')
def mines_cash_out(call):
    chat_id = call.message.chat.id
    if chat_id not in user_balances or user_balances[chat_id].get("game_type") != "mines":
        bot.answer_callback_query(call.id, "–≠—Ç–∞ –∏–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    game_data = user_balances[chat_id]
    if game_data["revealed_safe_cells"] == 0:
        bot.answer_callback_query(call.id, "–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏.")
        return

    final_win = game_data["current_win"]
    update_balance(chat_id, final_win)
    bot.send_message(chat_id, f"{EMOJI_MINES_WIN} –í—ã –∑–∞–±—Ä–∞–ª–∏ –≤—ã–∏–≥—Ä—ã—à: {final_win:.2f} –º–æ–Ω–µ—Ç!\n"
                               f"–í–∞—à –±–∞–ª–∞–Ω—Å: {get_user_data(chat_id)['balance']:.2f} –º–æ–Ω–µ—Ç.")
    game_data["game_type"] = ""
    send_welcome(call.message)

# --- Dice Game ---
@bot.message_handler(regexp='–ö—É–±–∏–∫–∏ üé≤')
def dice_start_menu(message):
    bot.send_message(message.chat.id, f"{EMOJI_CUBE_START} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ö—É–±–∏–∫–∏! –ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞–≤–∫—É?")
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫'),
        types.KeyboardButton('–í–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É (–ö—É–±–∏–∫–∏)')
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(regexp='–í–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É (–ö—É–±–∏–∫–∏)')
def dice_set_bet_prompt(message):
    prompt_for_bet(message, "–ö—É–±–∏–∫–∏", lambda msg: process_bet(msg, "dice", dice_start_menu))

@bot.message_handler(regexp='–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫')
def roll_dice(message):
    chat_id = message.chat.id
    if chat_id n